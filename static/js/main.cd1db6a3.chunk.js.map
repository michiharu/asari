{"version":3,"sources":["ColorPicker.tsx","RuleBox.tsx","RowsRenderer.tsx","funcs.ts","App.tsx","theme.tsx","index.tsx"],"names":["ColorPicker","props","color","setColor","disableAlpha","onChange","c","hex","RuleBox","allColors","index","id","selected","select","React","useState","anchorEl","setAnchorEl","open","Boolean","Box","py","Typography","variant","sx","ml","display","justifyContent","split","map","colorIndex","i","Card","width","cellSize","height","bgcolor","Number","mt","style","CardActionArea","onClick","event","currentTarget","alignItems","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","next","RowsRenderer","rows","colors","containerRef","useRef","size","setSize","containerCallbackRef","useCallback","node","current","getBoundingClientRect","stageRef","stageCallbackRef","stage","useEffect","measure","window","addEventListener","dx","scrollLeft","dy","scrollTop","container","transform","x","y","removeEventListener","containerSize","colCount","ref","overflow","row","r","cornerRadius","fill","range","length","result","push","defaultColors","random","int","Math","floor","createRules","colorCount","ids","entities","forEach","first","second","third","key","selectedIndex","coloringRowRecursive","ruleState","before","concat","App","setColorCount","slice","setColors","pickerIndex","setPickerIndex","setRuleState","firstRow","setFirstRow","handleSelectCellColorIndex","state","handleOpen","handleClose","flexDirection","p","FormControl","component","FormLabel","RadioGroup","value","e","countString","count","nextColors","FormControlLabel","control","Radio","label","pt","flexGrow","m","theme","createTheme","palette","primary","blue","secondary","pink","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.cd1db6a3.chunk.js","sourcesContent":["import React from 'react';\nimport { ChromePicker } from 'react-color';\n\ninterface Props {\n  color: string;\n  setColor: (color: string) => void;\n}\n\nexport const ColorPicker: React.FC<Props> = (props) => {\n  const { color, setColor } = props;\n  return <ChromePicker disableAlpha color={color} onChange={(c) => setColor(c.hex)} />;\n};\n","import React from 'react';\nimport { Box, Popover, Typography, Card, CardActionArea } from '@mui/material';\nimport PaletteIcon from '@mui/icons-material/Palette';\nimport { cellSize } from './App';\ninterface Props {\n  allColors: string[];\n  index: number;\n  id: string;\n  selected: number;\n  select: (id: string, selected: number) => void;\n}\n\nconst RuleBox: React.FC<Props> = (props) => {\n  const { allColors, index, id, selected, select } = props;\n\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  const handleOpen = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSelectColor = (next: number) => () => {\n    setAnchorEl(null);\n    select(id, next);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <Box py={1}>\n      <Typography variant=\"caption\" sx={{ ml: 1 }}>{`No. ${index + 1}`}</Typography>\n      <Box display=\"flex\" justifyContent=\"center\">\n        {id.split('-').map((colorIndex, i) => (\n          <Card key={i} sx={{ width: cellSize, height: cellSize, ml: i === 0 ? 0 : 1 }}>\n            <Box width={cellSize} height={cellSize} bgcolor={allColors[Number(colorIndex)]} />\n          </Card>\n        ))}\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" mt={1}>\n        <Card style={{ width: cellSize, height: cellSize }}>\n          <CardActionArea onClick={handleOpen}>\n            <Box\n              width={cellSize}\n              height={cellSize}\n              bgcolor={allColors[selected]}\n              sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\n            >\n              <PaletteIcon />\n            </Box>\n          </CardActionArea>\n        </Card>\n        <Popover\n          open={open}\n          anchorEl={anchorEl}\n          onClose={handleClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          <Box display=\"flex\">\n            {allColors.map((color, colorIndex) => (\n              <Card key={colorIndex} style={{ width: cellSize, height: cellSize }}>\n                <CardActionArea onClick={handleSelectColor(colorIndex)}>\n                  <Box width={cellSize} height={cellSize} bgcolor={color} />\n                </CardActionArea>\n              </Card>\n            ))}\n          </Box>\n        </Popover>\n      </Box>\n    </Box>\n  );\n};\n\nexport default RuleBox;\n","import React from 'react';\nimport { Box } from '@mui/material';\nimport { Layer, Rect, Stage } from 'react-konva';\nimport * as Konva from 'konva';\nimport { Size } from './types';\nimport { colCount } from './App';\n\nconst cellSize = 4;\nconst gridSize = 5;\n\ninterface Props {\n  rows: number[][];\n  colors: string[];\n}\n\nconst RowsRenderer: React.FC<Props> = (props) => {\n  const { rows, colors } = props;\n  const containerRef = React.useRef<HTMLDivElement>();\n  const [size, setSize] = React.useState<Size>({ width: 0, height: 0 });\n  const containerCallbackRef = React.useCallback((node: HTMLDivElement): void => {\n    if (node) {\n      containerRef.current = node;\n      const { width, height } = node.getBoundingClientRect();\n      setSize({ width, height });\n    }\n  }, []);\n  const stageRef = React.useRef<Konva.default.Stage | null>();\n  const stageCallbackRef = React.useCallback((stage: Konva.default.Stage): void => {\n    stageRef.current = stage;\n  }, []);\n\n  React.useEffect(() => {\n    const measure = () => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n        setSize({ width, height });\n      }\n    };\n    window.addEventListener('resize', measure);\n    measure();\n\n    const scroll = () => {\n      if (containerRef.current && stageRef.current) {\n        const dx = containerRef.current.scrollLeft;\n        const dy = containerRef.current.scrollTop;\n        stageRef.current.container().style.transform = 'translate(' + dx + 'px, ' + dy + 'px)';\n        stageRef.current.x(-dx);\n        stageRef.current.y(-dy);\n      }\n    };\n\n    if (containerRef.current) {\n      containerRef.current.addEventListener('scroll', scroll);\n    }\n\n    return () => window.removeEventListener('resize', measure);\n  }, []);\n\n  const containerSize: Size = { width: colCount * gridSize, height: ((colCount + 1) * gridSize) / 2 };\n\n  return (\n    <div\n      ref={containerCallbackRef}\n      style={{ width: 'calc(100vw - 232px)', height: 'calc(100vh - 144px)', overflow: 'auto' }}\n    >\n      <Box sx={{ ...containerSize, overflow: 'hidden' }}>\n        <Stage ref={stageCallbackRef} {...size}>\n          <Layer>\n            {rows.map((row, r) =>\n              row.map((colorIndex, c) => (\n                <Rect\n                  key={`${r}-${c}`}\n                  width={cellSize}\n                  height={cellSize}\n                  x={gridSize * (c + r)}\n                  y={gridSize * r}\n                  cornerRadius={1}\n                  fill={colors[colorIndex]}\n                />\n              ))\n            )}\n          </Layer>\n        </Stage>\n      </Box>\n    </div>\n  );\n};\n\nexport default RowsRenderer;\n","export const range = (length: number): number[] => {\n  const result: number[] = [];\n  for (let i = 0; i < length; i++) result.push(i);\n  return result;\n};\n","import React, { useState } from 'react';\nimport {\n  Typography,\n  Box,\n  FormControl,\n  RadioGroup,\n  FormLabel,\n  FormControlLabel,\n  Radio,\n  Card,\n  CardActionArea,\n  Popover,\n} from '@mui/material';\nimport { ColorPicker } from './ColorPicker';\nimport RuleBox from './RuleBox';\nimport RowsRenderer from './RowsRenderer';\nimport { range } from './funcs';\n\nconst defaultColors = ['#5FF7EE', '#D6784B', '#999999FF'];\nexport const colCount = 301;\nexport const size = `calc(100% / ${colCount})`;\nexport const cellSize = 48;\n\nexport type RuleState = {\n  ids: string[];\n  entities: { [key: string]: number };\n};\nconst random = (int: number): number => Math.floor(Math.random() * int);\n\nconst createRules = (colorCount: number): RuleState => {\n  const ids: string[] = [];\n  const entities: { [key in string]: number } = {};\n  range(colorCount).forEach((first) =>\n    range(colorCount).forEach((second) =>\n      range(colorCount).forEach((third) => {\n        const key = `${first}-${second}-${third}`;\n        ids.push(key);\n        const selectedIndex = random(colorCount);\n        entities[key] = selectedIndex;\n      })\n    )\n  );\n  return { ids, entities };\n};\n\nconst coloringRowRecursive = (ruleState: RuleState, rows: number[][]): number[][] => {\n  const { length, [length - 1]: before } = rows;\n  const next = before.length - 2;\n  if (next < 1) return rows;\n  const row: number[] = [];\n  for (let i = 0; i < next; i++) {\n    const key = `${before[i]}-${before[i + 1]}-${before[i + 2]}`;\n    row.push(ruleState.entities[key]);\n  }\n\n  return coloringRowRecursive(ruleState, rows.concat([row]));\n};\n\nconst App: React.FC = () => {\n  const [colorCount, setColorCount] = useState(3);\n  const [colors, setColors] = useState(defaultColors.slice(0, colorCount));\n  const [pickerIndex, setPickerIndex] = useState<number | undefined>();\n  const [ruleState, setRuleState] = useState<RuleState>(createRules(colorCount));\n  const [firstRow, setFirstRow] = useState(range(colCount).map(() => random(colors.length)));\n\n  const handleColorCount = (e: React.ChangeEvent<HTMLInputElement>, countString: string): void => {\n    const count = Number(countString);\n    setColorCount(count);\n    const nextColors = defaultColors.slice(0, count);\n    setColors(nextColors);\n    setRuleState(createRules(count));\n    setFirstRow(firstRow.map((c) => c % nextColors.length));\n  };\n\n  const setColor =\n    (index: number) =>\n    (color: string): void => {\n      setColors(colors.map((c, i) => (i === index ? color : c)));\n    };\n\n  const handleSelectCellColorIndex = (id: string, selected: number): void => {\n    setRuleState((state) => ({\n      ...state,\n      entities: { ...state.entities, [id]: selected },\n    }));\n  };\n\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleOpen = (index: number) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n    setPickerIndex(index);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const rows = coloringRowRecursive(ruleState, [firstRow]);\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'row', width: '100vw', height: '100vh' }}>\n      <Box sx={{ width: 200, p: 2, bgcolor: '#0001', overflow: 'scroll' }}>\n        <Box>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">色の数</FormLabel>\n            <RadioGroup value={colorCount} onChange={handleColorCount}>\n              <FormControlLabel value={2} control={<Radio />} label=\"2色\" />\n              <FormControlLabel value={3} control={<Radio />} label=\"3色\" />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n        <Box pt={2}>\n          <Typography>色の選択</Typography>\n          <Box display=\"flex\" justifyContent=\"center\" pt={1}>\n            {colors.map((color, index) => (\n              <Box key={index} ml={index === 0 ? 0 : 1}>\n                <Card style={{ width: cellSize, height: cellSize }}>\n                  <CardActionArea onClick={handleOpen(index)}>\n                    <Box width={cellSize} height={cellSize} bgcolor={color} />\n                  </CardActionArea>\n                </Card>\n                <Popover\n                  open={Boolean(anchorEl) && index === pickerIndex}\n                  anchorEl={anchorEl}\n                  onClose={handleClose}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                  }}\n                >\n                  <ColorPicker color={color} setColor={setColor(index)} />\n                </Popover>\n              </Box>\n            ))}\n          </Box>\n        </Box>\n        <Box pt={2}>\n          <Typography>ルール</Typography>\n          {ruleState.ids.map((id, index) => (\n            <RuleBox\n              key={index}\n              allColors={colors}\n              index={index}\n              id={id}\n              selected={ruleState.entities[id]}\n              select={handleSelectCellColorIndex}\n            />\n          ))}\n        </Box>\n      </Box>\n      <Box sx={{ flexGrow: 1, width: 2 }}>\n        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n          <Box sx={{ m: 2 }}>\n            <Typography variant=\"caption\">Elementary Cellular Automaton</Typography>\n            <Typography variant=\"h3\">アサリの模様</Typography>\n          </Box>\n          <Box sx={{ flexGrow: 1, height: 2, p: 2 }}>\n            <RowsRenderer rows={rows} colors={colors} />\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default App;\n","import { createTheme } from '@mui/material';\nimport { blue, pink } from '@mui/material/colors';\n\n// A custom theme for this app\nconst theme = createTheme({\n  palette: {\n    primary: blue,\n    secondary: pink,\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}